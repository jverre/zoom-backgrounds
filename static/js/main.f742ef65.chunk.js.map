{"version":3,"sources":["views/Homepage/sub-components/Form/Form.js","views/Homepage/sub-components/Background/Background.js","views/Homepage/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["CustomizedForm","onChange","fields","name","layout","onFieldsChange","changedFields","allFields","console","log","map","field","Item","key","label","Background","filter","x","value","toUpperCase","company","title","ref","useRef","drawImage","canvas","canvas_width","canvas_height","document","createElement","width","height","ctx","getContext","lineWidth","font_size","beginPath","fillStyle","fillRect","rect","stroke","font","textAlign","fillText","textBaseline","moveTo","lineTo","useEffect","current","style","id","type","icon","DownloadOutlined","size","onClick","link","download","href","toDataURL","click","Homepage","useState","setFields","Form","newFields","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f742ef65.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Input } from 'antd';\n\nconst CustomizedForm = ({ onChange, fields }) => {\n    return (\n        <Form\n            name=\"global_state\"\n            layout=\"vertical\"\n            fields={fields}\n            onFieldsChange={(changedFields, allFields) => {\n                console.log('allFields = ', allFields)\n            onChange(allFields);\n            }}\n        >\n            {fields.map(field => {\n                console.log()\n                return (\n                    <Form.Item\n                        key={field.name[0]}\n                        name={field.name[0]}\n                        label={field.name[0]}\n                        >\n                        <Input />\n                    </Form.Item>\n                )\n            })}\n            \n        </Form>\n    )\n};\n\nexport default CustomizedForm;","import React, { useRef, useEffect } from 'react';\nimport { Button } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst Background = (fields) => {\n    const name = fields.fields.filter(x => x.name[0] === 'name')[0].value.toUpperCase()\n    const company = fields.fields.filter(x => x.name[0] === 'company')[0].value\n    const title = fields.fields.filter(x => x.name[0] === 'title')[0].value\n    let ref = useRef();\n    let zoom = 0.3;\n\n    const drawImage = (canvas, canvas_width, canvas_height) => {\n        if (canvas === null) {\n            canvas = document.createElement('canvas');\n            canvas.width = canvas_width;\n            canvas.height = canvas_height;\n        }\n        const ctx = canvas.getContext('2d');\n        const lineWidth = canvas.width / 270;\n\n        const width = canvas.width - lineWidth;\n        const height = canvas.height - lineWidth;\n        const font_size = 0.05245 * width;\n        \n        ctx.lineWidth = lineWidth;\n        // Add rectangle\n        ctx.beginPath();\n        ctx.fillStyle = \"#E7F1F2\"\n        ctx.fillRect(lineWidth / 2, lineWidth / 2, width, height);\n        ctx.rect(lineWidth / 2, lineWidth / 2, width, height);\n        ctx.stroke();\n\n        // Draw top rectangle\n        ctx.beginPath();\n        ctx.fillStyle = '#6D72B4';\n        ctx.fillRect(lineWidth, lineWidth, 0.10*width - lineWidth, 0.15*height - lineWidth);\n        \n        // Add name text\n        ctx.font = `${font_size}px Roboto`;\n        ctx.fillStyle = 'black';\n        ctx.textAlign = \"right\";\n        ctx.fillText(name, 0.93 * width, 0.16 * width);\n\n        // Add company text\n        ctx.font = `${font_size * 2/3}px Courier`;\n        ctx.fillStyle = 'black';\n        ctx.textAlign = \"right\";\n        ctx.fillText(company, 0.93 * width, 0.20 * width);\n\n        // Add title text\n        ctx.font = `${font_size / 2}px Courier`;\n        ctx.fillStyle = 'black';\n        ctx.textAlign = \"right\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(title, 0.97 * width, 0.075 * height);\n\n        // Add lines vertical\n        ctx.beginPath();\n        ctx.moveTo(0.10 * width, 0);\n        ctx.lineTo(0.10 * width, height);\n        ctx.stroke();\n\n        // Add lines horizontal\n        ctx.beginPath();\n        ctx.moveTo(0, 0.15 * height);\n        ctx.lineTo(width, 0.15 * height);\n        ctx.stroke();\n        \n        return canvas\n    }\n\n    useEffect(() => {\n        let canvas = ref.current;\n        drawImage(canvas);\n    });\n\n    const saveCanvas = () => {\n        var link = document.createElement('a');\n        link.download = 'zoom_background.png';\n        link.href = drawImage(null, 1920, 1080).toDataURL();\n        link.click();\n    }\n    \n    return(\n        <div style={{'display': 'flex', 'align': 'center', 'flexDirection': 'column', 'alignItems': 'center', 'maxWidth': '100%'}}>\n            <div>\n                <canvas id=\"image_background\" ref={ref} width={1920*zoom} height={1080*zoom}/>\n            </div>\n            <div>\n                <Button type=\"primary\" icon={<DownloadOutlined />} size={'large'} onClick={saveCanvas}>\n                    Download\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Background;","import React, { useState } from \"react\";\nimport Form from \"./sub-components/Form/Form\";\nimport \"./Homepage.scss\";\nimport \"antd/dist/antd.css\";\nimport Background from \"./sub-components/Background/Background\";\n\nconst Homepage = () => {\n    const [fields, setFields] = useState([\n        {\n            name: [\"title\"],\n            value: \"ENTREPRENEUR FIRST - LD14\",\n        },{\n            name: [\"name\"],\n            value: \"WILL NASH\",\n        },{\n            name: [\"company\"],\n            value: \"Empela\",\n        },\n    ]);\n    \n    return (\n        <div style={{\"display\": \"flex\", 'alignItems': 'center', 'height': '100%'}}>\n            <div style={{\"width\": \"50%\", \"paddingRight\": \"10%\", \"paddingLeft\": \"5%\"}}>\n            <Form\n                fields={fields}\n                onChange={newFields => {\n                    setFields(newFields);\n                }}\n                />\n            </div>\n            <div style={{\"width\": \"50%\"}}>\n                <Background \n                    fields={fields}\n                />\n            </div>\n        </div>\n    )\n}\n\n\nexport default Homepage;","import React from 'react';\nimport './App.css';\nimport Homepage from './views/Homepage/Homepage';\n\nfunction App() {\n  return (\n    <Homepage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}